sed_rast_resampled <- resample(sed_rast_cropped, r)
sed_rast_resampled <- mask(sed_rast_resampled, A_area.shp )
# Bathymetry
runApp()
plot(sed_rast_resampled)
runApp()
runApp()
rm(list=ls(all=TRUE))
# Load packages
library(shiny)
library(shinydashboard)
library(leaflet)
library(terra)
library(viridis)
path.input <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/Model_results_5_7_24/'
# Fetch corresponding raster data based on the selected parameter
## Preprocessing
# Load Raster of area
A_area.rast <- terra::rast(paste0(path.input,("A_area_mask_10m.tif")))
# Load Shapefile of area
A_area.shp <- terra::vect(paste0(path.input,("Aquinnah_Project_Area.shp")))
A_area.shp <- terra::project(A_area.shp, "EPSG:4269")
# Load Shapefile of squibnocket
S_area.shp <- terra::vect(paste0(path.input,("Squibnocket_pond_only.shp")))
S_area.shp <- terra::project(S_area.shp, "EPSG:4269")
# Set Resolution
res <- res(A_area.rast) # comment this out if you change the resolution
r <- rast(resolution=res,crs= "EPSG:4269",extent=ext(A_area.rast))
plot(A_area.shp)
#
rm(list=ls(all=TRUE))
# Load packages
library(shiny)
library(shinydashboard)
library(leaflet)
library(terra)
library(viridis)
path.input <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/Model_results_5_7_24/'
# Fetch corresponding raster data based on the selected parameter
## Preprocessing
# Load Raster of area
A_area.rast <- terra::rast(paste0(path.input,("A_area_mask_10m.tif")))
A_area.rast <- terra::project(A_area.rast, "EPSG:4269")
# Load Shapefile of area
A_area.shp <- terra::vect(paste0(path.input,("Aquinnah_Project_Area.shp")))
A_area.shp <- terra::project(A_area.shp, "EPSG:4269")
# Load Shapefile of squibnocket
S_area.shp <- terra::vect(paste0(path.input,("Squibnocket_pond_only.shp")))
S_area.shp <- terra::project(S_area.shp, "EPSG:4269")
# Set Resolution
res <- res(A_area.rast) # comment this out if you change the resolution
r <- rast(resolution=res,crs= "EPSG:4269",extent=ext(A_area.rast))
#################### LOAD FIELD DATA ###############################
# Load Sediment Raster
# Load Sediment Raster
sed_rast <- terra::rast(paste0(path.input,("Idw_Sediment.tif")))
sed_rast <- terra::project(sed_rast, "EPSG:4269")
# crop to squibnocket because data only covers squibnocket
sed_rast_cropped <- terra::mask(sed_rast, S_area.shp)
# Bathymetry
bath_rast <- terra::rast(paste0(path.input,('Idw_Aquinnah3.tif')))
bath_rast <- terra::project(bath_rast, "EPSG:4269")
#bath_rast <- terra::mask(bath_rast, A_area.rast)
# Salinity
salinity_rast <- terra::rast(paste0(path.input, "Idw_Salinity_4.tif"))
salinity_rast <- terra::project(salinity_rast, "EPSG:4269")
#salinity_rast <- terra::mask(salinity_rast, S_area.shp)
# Velocity
velocity_rast <- terra::rast(paste0(path.input, "Idw_FlowTest_1.tif"))
velocity_rast <- terra::project(velocity_rast, "EPSG:4269")
#velocity_rast <- terra::mask(velocity_rast, A_area.rast)
# Temperature
temperature_rast <- terra::rast(paste0(path.input, "Idw_TempTest.tif"))
temperature_rast <- terra::project(temperature_rast, "EPSG:4269")
#temperature_rast <- terra::mask(temperature_rast, S_area.shp)
# SAV
SAV_rast <- terra::rast(paste0(path.input, "Reclass_10p32_1.tif"))
SAV_rast <- terra::project(SAV_rast, "EPSG:4269")
#SAV_rast <- terra::mask(SAV_rast, S_area.shp)
####################################################################
# Resample rasters to match the resolution of raster_mask without interpolation
# Sediment
sed_rast_resampled <- resample(sed_rast_cropped, r)
sed_rast_resampled <- terra::mask(sed_rast_resampled, A_area.shp )
plot(sed_rast)
plot(sed_rast_cropped)
# Bathymetry
bath_rast <- terra::rast(paste0(path.input,('Idw_Aquinnah3.tif')))
bath_rast <- terra::project(bath_rast, "EPSG:4269")
#bath_rast <- terra::mask(bath_rast, A_area.rast)
# Salinity
salinity_rast <- terra::rast(paste0(path.input, "Idw_Salinity_4.tif"))
salinity_rast <- terra::project(salinity_rast, "EPSG:4269")
#salinity_rast <- terra::mask(salinity_rast, S_area.shp)
# Velocity
velocity_rast <- terra::rast(paste0(path.input, "Idw_FlowTest_1.tif"))
velocity_rast <- terra::project(velocity_rast, "EPSG:4269")
#velocity_rast <- terra::mask(velocity_rast, A_area.rast)
# Temperature
temperature_rast <- terra::rast(paste0(path.input, "Idw_TempTest.tif"))
temperature_rast <- terra::project(temperature_rast, "EPSG:4269")
#temperature_rast <- terra::mask(temperature_rast, S_area.shp)
# SAV
SAV_rast <- terra::rast(paste0(path.input, "Reclass_10p32_1.tif"))
SAV_rast <- terra::project(SAV_rast, "EPSG:4269")
#SAV_rast <- terra::mask(SAV_rast, S_area.shp)
# Sediment
sed_rast_resampled <- resample(sed_rast_cropped, r)
sed_rast_resampled <- terra::mask(sed_rast_resampled, A_area.shp )
plot(sed_rast_resampled)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rm(list=ls(all=TRUE))
# Load packages
library(shiny)
library(shinydashboard)
library(leaflet)
library(terra)
library(viridis)
path.input <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/Model_results_5_7_24/'
# Fetch corresponding raster data based on the selected parameter
## Preprocessing
# Load Raster of area
A_area.rast <- terra::rast(paste0(path.input,("A_area_mask_10m.tif")))
A_area.rast <- terra::project(A_area.rast, "EPSG:4269")
# Load Shapefile of area
A_area.shp <- terra::vect(paste0(path.input,("Aquinnah_Proje_ExportFeature.shp")))
A_area.shp <- terra::project(A_area.shp, "EPSG:4269")
# Load Shapefile of squibnocket
S_area.shp <- terra::vect(paste0(path.input,("Squibnocket_pond_only.shp")))
S_area.shp <- terra::project(S_area.shp, "EPSG:4269")
# Set Resolution
res <- res(A_area.rast) # comment this out if you change the resolution
r <- rast(resolution=res,crs= "EPSG:4269",extent=ext(A_area.rast))
#################### LOAD FIELD DATA ###############################
# Load Sediment Raster
# Load Sediment Raster
sed_vect <- terra::vect(paste0(path.input,("Interpretation.shp")))
sed_vect <- terra::project(sed_vect, "EPSG:4269")
# crop to squibnocket because data only covers squibnocket
sed_vect_cropped <- terra::mask(sed_vect, A_area.shp)
# Bathymetry
bath_rast <- terra::rast(paste0(path.input,('Idw_Aquinnah3.tif')))
bath_rast <- terra::project(bath_rast, "EPSG:4269")
bath_rast <- terra::mask(bath_rast, A_area.shp)
# Salinity
salinity_rast <- terra::rast(paste0(path.input, "Idw_Salinity_4.tif"))
salinity_rast <- terra::project(salinity_rast, "EPSG:4269")
salinity_rast <- terra::mask(salinity_rast, A_area.shp)
# Velocity
velocity_rast <- terra::rast(paste0(path.input, "Idw_FlowTest_1.tif"))
velocity_rast <- terra::project(velocity_rast, "EPSG:4269")
velocity_rast <- terra::mask(velocity_rast, A_area.shp)
# Temperature
temperature_rast <- terra::rast(paste0(path.input, "Idw_TempTest.tif"))
temperature_rast <- terra::project(temperature_rast, "EPSG:4269")
temperature_rast <- terra::mask(temperature_rast, A_area.shp)
# SAV
SAV_rast <- terra::rast(paste0(path.input, "Reclass_10p32_1.tif"))
SAV_rast <- terra::project(SAV_rast, "EPSG:4269")
SAV_rast <- terra::mask(SAV_rast, A_area.shp)
####################################################################
# Resample rasters to match the resolution of raster_mask without interpolation
# Sediment
sed_rast <- rasterize(sed_vect,r)
plot(sed_rast)
runApp()
runApp()
#    http://shiny.rstudio.com/
#
rm(list=ls(all=TRUE))
# Load packages
library(shiny)
library(shinydashboard)
library(leaflet)
library(terra)
library(viridis)
path.input <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/Model_results_5_7_24/'
# Fetch corresponding raster data based on the selected parameter
## Preprocessing
# Load Raster of area
A_area.rast <- terra::rast(paste0(path.input,("A_area_mask_10m.tif")))
A_area.rast <- terra::project(A_area.rast, "EPSG:4269")
# Load Shapefile of area
A_area.shp <- terra::vect(paste0(path.input,("Aquinnah_Proje_ExportFeature.shp")))
A_area.shp <- terra::project(A_area.shp, "EPSG:4269")
# Load Shapefile of squibnocket
S_area.shp <- terra::vect(paste0(path.input,("Squibnocket_pond_only.shp")))
S_area.shp <- terra::project(S_area.shp, "EPSG:4269")
# Set Resolution
res <- res(A_area.rast) # comment this out if you change the resolution
r <- rast(resolution=res,crs= "EPSG:4269",extent=ext(A_area.rast))
#################### LOAD FIELD DATA ###############################
# Load Sediment Raster
# Load Sediment Raster
sed_vect <- terra::vect(paste0(path.input,("Squib_BenthicHab_points.shp")))
sed_vect <- terra::project(sed_vect, "EPSG:4269")
# crop to squibnocket because data only covers squibnocket
sed_vect_cropped <- terra::mask(sed_vect, A_area.shp)
# Bathymetry
bath_rast <- terra::rast(paste0(path.input,('Idw_Aquinnah3.tif')))
bath_rast <- terra::project(bath_rast, "EPSG:4269")
bath_rast <- terra::mask(bath_rast, A_area.shp)
# Salinity
salinity_rast <- terra::rast(paste0(path.input, "Idw_Salinity_4.tif"))
salinity_rast <- terra::project(salinity_rast, "EPSG:4269")
salinity_rast <- terra::mask(salinity_rast, A_area.shp)
# Velocity
velocity_rast <- terra::rast(paste0(path.input, "Idw_FlowTest_1.tif"))
velocity_rast <- terra::project(velocity_rast, "EPSG:4269")
velocity_rast <- terra::mask(velocity_rast, A_area.shp)
# Temperature
temperature_rast <- terra::rast(paste0(path.input, "Idw_TempTest.tif"))
temperature_rast <- terra::project(temperature_rast, "EPSG:4269")
temperature_rast <- terra::mask(temperature_rast, A_area.shp)
# SAV
SAV_rast <- terra::rast(paste0(path.input, "Reclass_10p32_1.tif"))
SAV_rast <- terra::project(SAV_rast, "EPSG:4269")
SAV_rast <- terra::mask(SAV_rast, A_area.shp)
####################################################################
# Resample rasters to match the resolution of raster_mask without interpolation
# Sediment
sed_rast <- rasterize(sed_vect_cropped,r)
sed_vect_resampled <- resample(sed_rast, r)
plot(sed_vect_resampled)
runApp()
rm(list=ls(all=TRUE))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rm(list=ls(all=TRUE))
# Load packages
library(shiny)
library(shinydashboard)
library(leaflet)
library(terra)
library(viridis)
library(plotly)
path.input <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/Model_results_5_7_24/'
# Fetch corresponding raster data based on the selected parameter
## Preprocessing
# Load Raster of area
A_area.rast <- terra::rast(paste0(path.input,("A_area_mask_10m.tif")))
A_area.rast <- terra::project(A_area.rast, "EPSG:4269")
# Load Shapefile of area
A_area.shp <- terra::vect(paste0(path.input,("Aquinnah_Proje_ExportFeature.shp")))
A_area.shp <- terra::project(A_area.shp, "EPSG:4269")
# Load Shapefile of squibnocket
S_area.shp <- terra::vect(paste0(path.input,("Squibnocket_pond_only.shp")))
S_area.shp <- terra::project(S_area.shp, "EPSG:4269")
# Set Resolution
res <- res(A_area.rast) # comment this out if you change the resolution
r <- rast(resolution=res,crs= "EPSG:4269",extent=ext(A_area.rast))
#################### LOAD FIELD DATA ###############################
# Load Sediment Raster
# Load Sediment Raster
sed_rast <- terra::rast(paste0(path.input,("Idw_Sediment.tif")))
sed_rast <- terra::project(sed_rast, "EPSG:4269")
# crop to squibnocket because data only covers squibnocket
sed_rast_cropped <- terra::mask(sed_rast, S_area.shp)
# Bathymetry
bath_rast <- terra::rast(paste0(path.input,('Idw_Aquinnah3.tif')))
bath_rast <- terra::project(bath_rast, "EPSG:4269")
bath_rast <- terra::mask(bath_rast, A_area.shp)
# Salinity
salinity_rast <- terra::rast(paste0(path.input, "Idw_Salinity_4.tif"))
salinity_rast <- terra::project(salinity_rast, "EPSG:4269")
salinity_rast <- terra::mask(salinity_rast, A_area.shp)
# Velocity
velocity_rast <- terra::rast(paste0(path.input, "Idw_FlowTest_1.tif"))
velocity_rast <- terra::project(velocity_rast, "EPSG:4269")
velocity_rast <- terra::mask(velocity_rast, A_area.shp)
# Temperature
temperature_rast <- terra::rast(paste0(path.input, "Idw_TempTest.tif"))
temperature_rast <- terra::project(temperature_rast, "EPSG:4269")
temperature_rast <- terra::mask(temperature_rast, A_area.shp)
# SAV
SAV_rast <- terra::rast(paste0(path.input, "Reclass_10p32_1.tif"))
SAV_rast <- terra::project(SAV_rast, "EPSG:4269")
SAV_rast <- terra::mask(SAV_rast, A_area.shp)
####################################################################
# Resample rasters to match the resolution of raster_mask without interpolation
# Sediment
sed_rast_resampled <- resample(sed_rast_cropped, r)
# Bathymetry
bath_rast_resampled <- resample(bath_rast,r)
# Salinity
salinity_rast_resampled <- resample(salinity_rast, r)
# Velocity
velocity_rast_resampled <- resample(velocity_rast, r)
# convert cm/s to m/s
velocity_rast_resampled <- abs(velocity_rast_resampled / 100)
# Temperature
temperature_rast_resampled <- resample(temperature_rast, r)
# Sub-Aquatic Vegetation
SAV_rast_resampled <- resample(SAV_rast, r)
# Reclassify values
# Define the classification matrix
classification_matrix <- matrix(c(0, Inf, 1), ncol = 3)
# Reclassify values
SAV_rast_reclassified <- classify(SAV_rast_resampled, classification_matrix)
# If you want to include values less than 0.5 as 0, you can add an 'others' argument
SAV_rast_reclassified <- classify(SAV_rast_resampled, classification_matrix, others = 0)
# Load Habitat Model Results
adult_alewife <- terra::rast(paste0(path.input,"adult_alewife_habitat_data.tif"))
egg_alewife <- terra::rast(paste0(path.input,"egg_larvae_alewife_habitat_data.tif"))
juv_alewife <- terra::rast(paste0(path.input,"nonmigratory_juvenile_alewife_habitat_data.tif"))
adult_blueback <- terra::rast(paste0(path.input,"adult_blueback_habitat_data.tif"))
egg_blueback <- terra::rast(paste0(path.input,"egg_larvae_blueback_habitat_data.tif"))
juv_blueback <- terra::rast(paste0(path.input,"nonmigratory_juvenile_blueback_habitat_data.tif"))
plot(adult_alewife)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(adult_alewife)
renderLeaflet({
min_value <- min(values(adult_alewife), na.rm = TRUE)
max_value <- max(values(adult_alewife), na.rm = TRUE)
leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
setView(lng = -70.7916, lat = 41.3328, zoom = 12) %>%
addRasterImage(adult_alewife, colors = viridis(10)) %>%
addLegend("bottomright", pal = colorNumeric(viridis(10), domain = c(0, 1)), values = seq(0, 1), title = "Habitat Suitability")
})
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
#    http://shiny.rstudio.com/
#
rm(list=ls(all=TRUE))
# Load packages
library(shiny)
library(shinydashboard)
library(leaflet)
library(terra)
library(viridis)
library(plotly)
library(shinythemes)
library(ggiraph)
library(dplyr)
library(ggmap)
library(leaflet.extras)
library(DT)
path.input <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/Model_results_5_7_24/'
path.output <- '/Users/RDEL1VMM/Documents/Netlogo/Herring_Squibnocket/AquinnahHerringMigrationModel/raw_data_processing/'
migration.model.input <- "/Users/RDEL1VMM/Documents/Netlogo/Herring_Squibnocket/AquinnahHerringMigrationModel/output"
# Set up your Google API key
api_key <- "AIzaSyBXMCgi4IjTws4noaeAl7XvgFkETFgH4Zw"
# Register your Google API key
register_google(key = api_key)
# Function to ensure rasters are 2D
drop_z <- function(r) {
if (terra::nlyr(r) == 1) {
return(r)
} else {
return(r[[1]])
}
}
# Load Raster of area
A_area.rast <- terra::rast(paste0(path.input, "A_area_mask_10m.tif"))
A_area.rast <- drop_z(A_area.rast)
A_area.rast <- terra::project(A_area.rast, "EPSG:4269")
# Load Shapefile of area
A_area.shp <- terra::vect(paste0(path.input, "Aquinnah_Proje_ExportFeature.shp"))
A_area.shp <- terra::project(A_area.shp, "EPSG:4269")
# Load Shapefile of squibnocket
S_area.shp <- terra::vect(paste0(path.input, "Squibnocket_pond_only.shp"))
S_area.shp <- terra::project(S_area.shp, "EPSG:4269")
# Set Resolution
res <- res(A_area.rast)
r <- rast(resolution=res, crs="EPSG:4269", extent=ext(A_area.rast))
runApp()
runApp()
# Load Shapefile of area
A_area.shp <- terra::vect(paste0(path.input, "Aquinnah_Proje_ExportFeature.shp"))
A_area.shp <- terra::project(A_area.shp, "EPSG:4269")
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='vkzfr3-vanessa-mahan',
token='587C348C756D5FB00E3374F4384FE8DC',
secret='lBEcMqTrfOZ6dZpyygY5EwCNwQDpN/Yu5AF9m2yW')
library(rsconnect)
rsconnect::deployApp('app')
library(rsconnect)
rsconnect::deployApp('/Users/RDEL1VMM/Desktop/current projects/RH_Dashboard/app.R')
library(rsconnect)
rsconnect::deployApp('/Users/RDEL1VMM/Desktop/current projects/RH_Dashboard')
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls(all=TRUE))
# Load packages
library(shiny)
library(shinydashboard)
library(leaflet)
library(terra)
library(viridis)
library(plotly)
library(shinythemes)
library(ggiraph)
library(dplyr)
library(ggmap)
library(leaflet.extras)
library(DT)
path.input <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/Model_results_5_7_24/'
path.output <- '/Users/RDEL1VMM/Documents/Netlogo/Herring_Squibnocket/AquinnahHerringMigrationModel/raw_data_processing/'
migration.model.input <- "/Users/RDEL1VMM/Documents/Netlogo/Herring_Squibnocket/AquinnahHerringMigrationModel/output"
api_key <- "AIzaSyBXMCgi4IjTws4noaeAl7XvgFkETFgH4Zw"
runApp()
path.input <- '/www/'
path.output <- '/www/'
#migration.model.input <- "/Users/RDEL1VMM/Documents/Netlogo/Herring_Squibnocket/AquinnahHerringMigrationModel/output"
# Set up your Google API key
api_key <- "AIzaSyBXMCgi4IjTws4noaeAl7XvgFkETFgH4Zw"
# Register your Google API key
register_google(key = api_key)
# Function to ensure rasters are 2D
drop_z <- function(r) {
if (terra::nlyr(r) == 1) {
return(r)
} else {
return(r[[1]])
}
}
# Load Habitat Model Results
adult_alewife <- terra::rast(paste0(path.input, "adult_alewife_habitat_data.tif"))
setwd("C:/Users/RDEL1VMM/Desktop/current projects/RH_Dashboard")
path.input <- '/www/'
path.output <- '/www/'
#migration.model.input <- "/Users/RDEL1VMM/Documents/Netlogo/Herring_Squibnocket/AquinnahHerringMigrationModel/output"
# Set up your Google API key
api_key <- "AIzaSyBXMCgi4IjTws4noaeAl7XvgFkETFgH4Zw"
# Register your Google API key
register_google(key = api_key)
# Function to ensure rasters are 2D
drop_z <- function(r) {
if (terra::nlyr(r) == 1) {
return(r)
} else {
return(r[[1]])
}
}
# Load Habitat Model Results
adult_alewife <- terra::rast(paste0(path.input, "adult_alewife_habitat_data.tif"))
adult_alewife <- terra::rast("www/adult_alewife_habitat_data.tif")
adult_alewife_data <- read.csv("www/adult_alewife_habitat_data.csv") #HSI
runApp()
temp_adult_alewife <- terra::rast("www/adult_alewife_habitat_Temp_data.tif")
