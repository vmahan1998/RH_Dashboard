shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Clear local memory
rm(list=ls(all=TRUE))
# Load Packages
library("terra")
library("gstat")
library("raster")
# Adjust the input and output paths according to your relevant folder paths
path.input <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/River_Herring_Habitat_Models/Habitat Functions/Processed Data/'
path.output <- '/Users/RDEL1VMM/Desktop/current projects/Aquinnah Herring Hatchery/Model_results_5_7_24/'
# Load Raster of area
A_area.rast <- terra::rast(paste0(path.output,("A_area_mask_10m.tif")))
# Load Shapefile of area
A_area.shp <- terra::vect(paste0(path.output,("Aquinnah_Project_Area.shp")))
A_area.shp <- terra::project(A_area.shp, "EPSG:4269")
# Load Shapefile of squibnocket
S_area.shp <- terra::vect(paste0(path.output,("Squibnocket_pond_only.shp")))
S_area.shp <- terra::project(S_area.shp, "EPSG:4269")
# Set Resolution
res <- res(A_area.rast) # comment this out if you change the resolution
r <- rast(resolution=res,crs= "EPSG:4269",extent=ext(A_area.rast))
#################### LOAD FIELD DATA ###############################
# Load Sediment Raster
sed_rast <- terra::rast(paste0(path.output,("Idw_Sediment.tif")))
sed_rast <- terra::project(sed_rast, "EPSG:4269")
# crop to squibnocket because data only covers squibnocket
sed_rast_cropped <- terra::mask(sed_rast, S_area.shp)
# Bathymetry
bath_rast <- terra::rast(paste0(path.output,('Idw_Aquinnah3.tif')))
bath_rast <- terra::project(bath_rast, "EPSG:4269")
# Salinity
salinity_rast <- terra::rast(paste0(path.output, "Idw_Salinity_4.tif"))
salinity_rast <- terra::project(salinity_rast, "EPSG:4269")
# Velocity
velocity_rast <- terra::rast(paste0(path.output, "Idw_FlowTest_1.tif"))
velocity_rast <- terra::project(velocity_rast, "EPSG:4269")
# Temperature
temperature_rast <- terra::rast(paste0(path.output, "Idw_TempTest.tif"))
temperature_rast <- terra::project(temperature_rast, "EPSG:4269")
# SAV
SAV_rast <- terra::rast(paste0(path.output, "Reclass_10p32_1.tif"))
SAV_rast <- terra::project(SAV_rast, "EPSG:4269")
####################################################################
# Resample rasters to match the resolution of raster_mask without interpolation
# Sediment
sed_rast_resampled <- resample(sed_rast_cropped, r)
# Bathymetry
bath_rast_resampled <- resample(bath_rast,r)
# Salinity
salinity_rast_resampled <- resample(salinity_rast, r)
# Velocity
velocity_rast_resampled <- resample(velocity_rast, r)
# convert cm/s to m/s
velocity_rast_resampled <- abs(velocity_rast_resampled / 100)
# Temperature
temperature_rast_resampled <- resample(temperature_rast, r)
# Sub-Aquatic Vegetation
SAV_rast_resampled <- resample(SAV_rast, r)
# Reclassify values
# Define the classification matrix
classification_matrix <- matrix(c(0.5, Inf, 1), ncol = 3)
# Reclassify values
SAV_rast_reclassified <- classify(SAV_rast_resampled, classification_matrix)
# If you want to include values less than 0.5 as 0, you can add an 'others' argument
SAV_rast_reclassified <- classify(SAV_rast_resampled, classification_matrix, others = 0)
# Create a raster stack with the adjusted rasters
rast.stack <- c(temperature_rast_resampled, bath_rast_resampled, velocity_rast_resampled, salinity_rast_resampled, sed_rast_resampled, SAV_rast_reclassified)
names(rast.stack) <- c("temperature", "depth", "velocity", "salinity", "substrate","SAV")
plot(rast.stack)
rast.stack.extract <- terra::extract(rast.stack, A_area.shp, fun = NULL, method = "simple", xy = TRUE, layer = NULL, na.rm = FALSE)
rast.stack_data <- as.data.frame(rast.stack.extract)
# Save the output table as CSV
save_path <- paste0(path.output, paste0("Habitat_Parameter_Data.csv"))
readr::write_csv(rast.stack_data, save_path)
min(SAV_rast_resampled)
print(SAV_rast_reclassified)
View(sed_rast_resampled)
View(classification_matrix)
plot(SAV_rast_reclassified)
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
